name: Deploy to AWS

on:
  release:
    types: [published]
  push:
    branches:
      - "master"

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: duckhue01
  CONTAINER_NAME: simple-bank
  CLUSTER_NAME: duckhue01.k8s.local
  STATE_BUCKET: s3://duckhue01-state-bucket
  AWS_DEFAULT_REGION: ap-southeast-1
  ECR_REGISTRY: 633674601707.dkr.ecr.ap-southeast-1.amazonaws.com

jobs:
  test:
    runs-on: ubuntu-latest
    name: run test
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: simple-bank
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2

      - name: set up go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate.linux-amd64 /usr/bin/migrate
          which migrate

      - name: Run migrations
        run: make migrateUp

      - name: test
        run: go test -v ./...
  build:
    name: build and push to ECR
    runs-on: ubuntu-latest
    environment: production
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        # run: |
        #   docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG  .
        #   docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest .
        #   docker push  ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        #   docker push  ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest  .
          docker push  -a ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}

  deploy:
    name: deploy to ec2
    runs-on: ubuntu-latest
    environment: production
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Connect to Cluster and Deploy image to EC2
        run: |
          export KUBECONFIG=/home/runner/work/simple-bank/simple-bank/k8s/config
          source ~/.bashrc

          kubectl config use-context duckhue01.k8s.local
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/service.yaml
